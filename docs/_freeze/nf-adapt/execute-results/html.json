{
  "hash": "99a8749bdb41e64f77fd32de347bbc2a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Adaptation with Normalizing Flows\n---\n\n\n\n**Experimental and subject to change**\n\nNormalizing flow adaptation through Fisher HMC is a new sampling algorithm that\nautomatically reparameterizes a model. It adds some computational cost outside\nmodel log-density evaluations, but allows sampling from much more difficult\nposterior distributions. For models with expensive log-density evaluations, the\nnormalizing flow adaptation can also be much faster, if it can reduce the number\nof log-density evaluations needed to reach a given effective sample size.\n\nThe normalizing flow adaptation works by learning a transformation of the parameter\nspace that makes the posterior distribution more amenable to sampling. This is done\nby fitting a sequence of invertible transformations (the \"flow\") that maps the\noriginal parameter space to a space where the posterior is closer to a standard\nnormal distribution. The flow is trained during warmup.\n\nFor more information about the algorithm, see the (still work in progress) paper\n[If only my posterior were normal: Introducing Fisher\nHMC](https://github.com/aseyboldt/covadapt-paper/releases/download/latest/main.pdf).\n\nCurrently, a lot of time is spent on compiling various parts of the normalizing\nflow, and for small models this can take a large amount of the total time.\nHopefully, we will be able to reduce this overhead in the future.\n\n## Requirements\n\nInstall the optional dependencies for normalizing flow adaptation:\n\n```\npip install 'nutpie[nnflow]'\n```\n\nIf you use with PyMC, this will only work if the model is compiled using the jax\nbackend, and if the `gradient_backend` is also set to `jax`.\n\nTraining of the normalizing flow can often be accelerated by using a GPU (even\nif the model itself is written in Stan, without any GPU support). To enable GPU\nyou need to make sure your `jax` installation comes with GPU support, for\ninstance by installing it with `pip install 'jax[cuda12]'`, or selecting the\n`jaxlib` version with GPU support, if you are using conda-forge. You can check if\nyour installation has GPU support by checking the output of:\n\n```python\nimport jax\njax.devices()\n```\n\n### Usage\n\nTo use normalizing flow adaptation in `nutpie`, you need to enable the\n`transform_adapt` option during sampling. Here is an example of how we can use\nit to sample from a difficult posterior:\n\n\n::: {#1e499251 .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport nutpie\nimport numpy as np\nimport arviz\n\n# Define a 100-dimensional funnel model\nwith pm.Model() as model:\n    log_sigma = pm.Normal(\"log_sigma\")\n    pm.Normal(\"x\", mu=0, sigma=pm.math.exp(log_sigma / 2), shape=100)\n\n# Compile the model with the jax backend\ncompiled = nutpie.compile_pymc_model(\n    model, backend=\"jax\", gradient_backend=\"jax\"\n)\n```\n:::\n\n\nIf we sample this model without normalizing flow adaptation, we will encounter\nconvergence issues, often divergences and always low effective sample sizes:\n\n::: {#f7faabf0 .cell execution_count=2}\n``` {.python .cell-code}\n# Sample without normalizing flow adaptation\ntrace_no_nf = nutpie.sample(compiled, seed=1)\nassert (arviz.ess(trace_no_nf) < 100).any().to_array().any()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">6</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">6</span>\n    </p>\n    <p>Sampling for 16 seconds</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"8400\"\n        value=\"8400\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.45</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.31</td>\n                    <td>15</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.31</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.28</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.39</td>\n                    <td>15</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.34</td>\n                    <td>7</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n:::\n\n\n::: {#6cfb99bd .cell execution_count=3}\n``` {.python .cell-code}\n# We can add further arguments for the normalizing flow:\ncompiled = compiled.with_transform_adapt(\n    num_layers=5,        # Number of layers in the normalizing flow\n    nn_width=32,         # Neural networks with 32 hidden units\n    num_diag_windows=6,  # Number of windows with a diagonal mass matrix intead of a flow\n    verbose=False,       # Whether to print details about the adaptation process\n    show_progress=False, # Whether to show a progress bar for each optimization step\n)\n\n# Sample with normalizing flow adaptation\ntrace_nf = nutpie.sample(\n    compiled,\n    transform_adapt=True,  # Enable the normalizing flow adaptation\n    seed=1,\n    chains=2,\n    cores=1,  # Running chains in parallel can be slow\n    window_switch_freq=150,  # Optimize the normalizing flow every 150 iterations\n)\nassert trace_nf.sample_stats.diverging.sum() == 0\nassert (arviz.ess(trace_nf) > 1000).all().to_array().all()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">2</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">2</span>\n    </p>\n    <p>Sampling for 18 minutes</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"5000\"\n        value=\"5000\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2500\"\n                            value=\"2500\">\n                        </progress>\n                    </td>\n                    <td>2500</td>\n                    <td>0</td>\n                    <td>0.52</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2500\"\n                            value=\"2500\">\n                        </progress>\n                    </td>\n                    <td>2500</td>\n                    <td>0</td>\n                    <td>0.53</td>\n                    <td>7</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n:::\n\n\nThe sampler used fewer gradient evaluations with the normalizing flow adaptation,\nbut still converged, and produce a good effective sample size:\n\n::: {#78aaecea .cell execution_count=4}\n``` {.python .cell-code}\nn_steps = int(trace_nf.sample_stats.n_steps.sum() + trace_nf.warmup_sample_stats.n_steps.sum())\ness = float(arviz.ess(trace_nf).min().to_array().min())\nprint(f\"Number of gradient evaluations: {n_steps}\")\nprint(f\"Minimum effective sample size: {ess}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of gradient evaluations: 42527\nMinimum effective sample size: 1835.9674640023168\n```\n:::\n:::\n\n\nWithout normalizing flow, it used more gradient evaluations, and still wasn't able\nto get a good effective sample size:\n\n::: {#820fea9f .cell execution_count=5}\n``` {.python .cell-code}\nn_steps = int(trace_no_nf.sample_stats.n_steps.sum() + trace_no_nf.warmup_sample_stats.n_steps.sum())\ness = float(arviz.ess(trace_no_nf).min().to_array().min())\nprint(f\"Number of gradient evaluations: {n_steps}\")\nprint(f\"Minimum effective sample size: {ess}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of gradient evaluations: 124219\nMinimum effective sample size: 31.459420094540565\n```\n:::\n:::\n\n\nThe flow adaptation occurs during warmup, so the number of warmup draws should\nbe large enough to allow the flow to converge. For more complex posteriors, you\nmay need to increase the number of layers (using the `num_layers` argument), or\nyou might want to increase the number of warmup draws.\n\nTo monitor the progress of the flow adaptation, you can set `verbose=True`, or\n`show_progress=True`, but the second should only be used if you sample just one\nchain.\n\nAll losses are on a log-scale. Negative values smaller -2 are a good sign that\nthe adaptation was successful. If the loss stays positive, the flow is either\nnot expressive enough, or the training period is too short. The sampler might\nstill converge, but will probably need more gradient evaluations per effective\ndraw. Large losses bigger than 6 tend to indicate that the posterior is too\ndifficult to sample with the current flow, and the sampler will probably not\nconverge.\n\n",
    "supporting": [
      "nf-adapt_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}