{
  "hash": "1bb39e60c4e9c979109a04b06b7d02e7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Understanding Sampler Statistics in Nutpie\n---\n\n\n\nThis guide explains the various statistics that nutpie collects during sampling. We'll use Neal's funnel distribution as an example, as it's a challenging model that demonstrates many important sampling concepts.\n\n## Example Model: Neal's Funnel\n\nLet's start by implementing Neal's funnel in PyMC:\n\n\n::: {#9ef0aa6e .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport nutpie\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport arviz as az\n\n# Create the funnel model\nwith pm.Model() as model:\n    log_sigma = pm.Normal('log_sigma')\n    pm.Normal('x', sigma=pm.math.exp(log_sigma), shape=5)\n\n# Sample with detailed statistics\ncompiled = nutpie.compile_pymc_model(model)\ntrace = nutpie.sample(\n    compiled,\n    tune=1000,\n    store_mass_matrix=True,\n    store_gradient=True,\n    store_unconstrained=True,\n    store_divergences=True,\n    seed=42,\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">6</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">6</span>\n    </p>\n    <p>Sampling for now</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"12000\"\n        value=\"12000\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>21</td>\n                    <td>0.41</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>24</td>\n                    <td>0.35</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.35</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>13</td>\n                    <td>0.44</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.34</td>\n                    <td>15</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>5</td>\n                    <td>0.53</td>\n                    <td>7</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n:::\n\n\n## Sampler Statistics Overview\n\nThe sampler statistics can be grouped into several categories:\n\n### Basic HMC Statistics\n\nThese statistics are always collected and are essential for basic diagnostics:\n\n::: {#ffa51d43 .cell execution_count=2}\n``` {.python .cell-code}\n# Access through trace.sample_stats\nbasic_stats = [\n    'depth',              # Tree depth for current draw\n    'maxdepth_reached',   # Whether max tree depth was hit\n    'logp',               # Log probability of current position\n    'energy',             # Hamiltonian energy\n    'diverging',          # Whether the transition diverged\n    'step_size',          # Current step size\n    'step_size_bar',      # Current estimate of an ideal step size\n    'n_steps'             # Number of leapfrog steps\n\n]\n\n# Plot step size evolution during warmup\ntrace.warmup_sample_stats.step_size_bar.plot.line(x=\"draw\", yscale=\"log\")\n```\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n### Mass Matrix Adaptation\n\nThese statistics track how the mass matrix evolves:\n\n::: {#146dc128 .cell execution_count=3}\n``` {.python .cell-code}\n(\n    trace\n    .warmup_sample_stats\n    .mass_matrix_inv\n    .plot\n    .line(\n        x=\"draw\",\n        yscale=\"log\",\n        col=\"chain\",\n        col_wrap=2,\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\nVariables that are a source of convergence issues, will often show high variance\nin the final mass matrix estimate across chains.\n\nThe mass matrix will always be fixed for 10% of draws at the end, because we\nonly run final step size adaptation during that time, but high variance in the\nmass matrix before this final window and indicate that more tuning steps might\nbe needed.\n\n### Detailed Diagnostics\n\nThese are only available when explicitly requested:\n\n```python\ndetailed_stats = [\n    'gradient',              # Gradient at current position\n    'unconstrained_draw',    # Parameters in unconstrained space\n    'divergence_start',      # Position where divergence started\n    'divergence_end',        # Position where divergence ended\n    'divergence_momentum',   # Momentum at divergence\n    'divergence_message'     # Description of divergence\n]\n```\n\n#### Idintify Divergences\n\nWe can for instance use this to identify the sources of divergences:\n\n::: {#44f63008 .cell execution_count=4}\n``` {.python .cell-code}\nimport xarray as xr\n\ndraws = (\n    trace\n    .sample_stats\n    .unconstrained_draw\n    .assign_coords(kind=\"draw\")\n)\ndivergence_locations = (\n    trace\n    .sample_stats\n    .divergence_start\n    .assign_coords(kind=\"divergence\")\n)\n\npoints = xr.concat([draws, divergence_locations], dim=\"kind\")\npoints.to_dataset(\"unconstrained_parameter\").plot.scatter(x=\"log_sigma\", y=\"x_0\", hue=\"kind\")\n```\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n#### Covariance of gradients and draws\n\nTODO this section should really use the transformed gradients and draws, not the\nunconstrained ones, as that avoids the manual mass matrix correction. This\nis only available for the normalizing flow adaptation at the moment though.\n\nIn models with problematic posterior correlations, the singular value\ndecomposition of gradients and draws can often point us to the source of the\nissue.\n\nLet's build a little model with correlations between parameters:\n\n::: {#32313889 .cell execution_count=5}\n``` {.python .cell-code}\nwith pm.Model() as model:\n    x = pm.Normal('x')\n    y = pm.Normal(\"y\", mu=x, sigma=0.01)\n    z = pm.Normal(\"z\", mu=y, shape=100)\n\ncompiled = nutpie.compile_pymc_model(model)\ntrace = nutpie.sample(\n    compiled,\n    tune=1000,\n    store_gradient=True,\n    store_unconstrained=True,\n    store_mass_matrix=True,\n    seed=42,\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">6</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">6</span>\n    </p>\n    <p>Sampling for now</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"12000\"\n        value=\"12000\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.13</td>\n                    <td>31</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.16</td>\n                    <td>31</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.22</td>\n                    <td>15</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.14</td>\n                    <td>31</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.15</td>\n                    <td>31</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"2000\"\n                            value=\"2000\">\n                        </progress>\n                    </td>\n                    <td>2000</td>\n                    <td>0</td>\n                    <td>0.15</td>\n                    <td>31</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n:::\n\n\nNow we can compute eigenvalues of the covariance matrix of the gradient and\ndraws (using the singular value decomposition to avoid quadratic cost):\n\n::: {#be02c1fa .cell execution_count=6}\n``` {.python .cell-code}\ndef covariance_eigenvalues(x, mass_matrix):\n    assert x.dims == (\"chain\", \"draw\", \"unconstrained_parameter\")\n    x = x.stack(sample=[\"draw\", \"chain\"])\n    x = (x - x.mean(\"sample\")) / np.sqrt(mass_matrix)\n    u, s, v = np.linalg.svd(x.T / np.sqrt(x.shape[1]), full_matrices=False)\n    print(u.shape, s.shape, v.shape)\n    s = xr.DataArray(\n        s,\n        dims=[\"eigenvalue\"],\n        coords={\"eigenvalue\": range(s.size)},\n    )\n    v = xr.DataArray(\n        v,\n        dims=[\"eigenvalue\", \"unconstrained_parameter\"],\n        coords={\n            \"eigenvalue\": s.eigenvalue,\n            \"unconstrained_parameter\": x.unconstrained_parameter,\n        },\n    )\n    return s ** 2, v\n\nmass_matrix = trace.sample_stats.mass_matrix_inv.isel(draw=-1, chain=0)\ndraws_eigs, draws_eigv = covariance_eigenvalues(trace.sample_stats.unconstrained_draw, mass_matrix)\ngrads_eigs, grads_eigv = covariance_eigenvalues(trace.sample_stats.gradient, 1 / mass_matrix)\n\ndraws_eigs.plot.line(x=\"eigenvalue\", yscale=\"log\")\ngrads_eigs.plot.line(x=\"eigenvalue\", yscale=\"log\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(6000, 102) (102,) (102, 102)\n(6000, 102) (102,) (102, 102)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-7-output-2.png){}\n:::\n:::\n\n\nWe can see one very large and one very small eigenvalue in both covariances.\nLarge eigenvalues for the draws, and small eigenvalues for the gradients prevent\nthe sampler from taking larger steps. Small eigenvalues in the draws, and large\neigenvalues in the grads mean, that the sampler has to move far in parameter\nspace to get independent draws. So both lead to problems during sampling. For\nmodels with many parameters, typically only the large eigenvalues of each are\nmeaningful, because of estimation issues with the small eigenvalues.\n\nWe can also look at the eigenvectors to see which parameters are responsible for\nthe correlations:\n\n::: {#202af166 .cell execution_count=7}\n``` {.python .cell-code}\n(\n    draws_eigv\n    .sel(eigenvalue=0)\n    .to_pandas()\n    .sort_values(key=abs)\n    .tail(10)\n    .plot.bar(x=\"unconstrained_parameter\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n::: {#52404958 .cell execution_count=8}\n``` {.python .cell-code}\n(\n    grads_eigv\n    .sel(eigenvalue=0)\n    .to_pandas()\n    .sort_values(key=abs)\n    .tail(10)\n    .plot.bar(x=\"unconstrained_parameter\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](sample-stats_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "sample-stats_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}