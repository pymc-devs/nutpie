{
  "hash": "ac7a423bf030ba01af71438dff77ab16",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Usage with Stan models\n---\n\n\n\nThis document shows how to use `nutpie` with Stan models. We will use the\n`nutpie` package to define a simple model and sample from it using Stan.\n\n## Installation\n\nFor Stan, it is more common to use `pip` or `uv` to install the necessary\npackages. However, `conda` is also an option if you prefer.\n\nTo install using `pip`:\n\n```bash\npip install \"nutpie[stan]\"\n```\n\nTo install using `uv`:\n\n```bash\nuv add \"nutpie[stan]\"\n```\n\nTo install using `conda`:\n\n```bash\nconda install -c conda-forge nutpie\n```\n\n## Compiler Toolchain\n\nStan requires a compiler toolchain to be installed on your system. This is\nnecessary for compiling the Stan models. You can find detailed instructions for\nsetting up the compiler toolchain in the [CmdStan\nGuide](https://mc-stan.org/docs/cmdstan-guide/installation.html#cpp-toolchain).\n\nAdditionally, since Stan uses Intel's Threading Building Blocks (TBB) for\nparallelism, you might need to set the `TBB_CXX_TYPE` environment variable to\nspecify the compiler type. Depending on your system, you can set it to either\n`clang` or `gcc`. For example:\n\n\n::: {#8f4ef971 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nos.environ[\"TBB_CXX_TYPE\"] = \"clang\"  # or 'gcc'\n```\n:::\n\n\nMake sure to set this environment variable before compiling your Stan models to ensure proper configuration.\n\n## Defining and Sampling a Simple Model\n\nWe will define a simple Bayesian model using Stan and sample from it using\n`nutpie`.\n\n### Model Definition\n\nIn your Python script or Jupyter notebook, add the following code:\n\n::: {#2cded72e .cell execution_count=2}\n``` {.python .cell-code}\nimport nutpie\n\nmodel_code = \"\"\"\ndata {\n    int<lower=0> N;\n    vector[N] y;\n}\nparameters {\n    real mu;\n}\nmodel {\n    mu ~ normal(0, 1);\n    y ~ normal(mu, 1);\n}\n\"\"\"\n\ncompiled_model = nutpie.compile_stan_model(code=model_code)\n```\n:::\n\n\n### Sampling\n\nWe can now compile the model and sample from it:\n\n::: {#60b965bf .cell execution_count=3}\n``` {.python .cell-code}\ncompiled_model_with_data = compiled_model.with_data(N=3, y=[1, 2, 3])\ntrace = nutpie.sample(compiled_model_with_data)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">6</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">6</span>\n    </p>\n    <p>Sampling for now</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"8400\"\n        value=\"8400\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.33</td>\n                    <td>3</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.39</td>\n                    <td>1</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.37</td>\n                    <td>3</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.38</td>\n                    <td>1</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.35</td>\n                    <td>3</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>1.33</td>\n                    <td>3</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n:::\n\n\n### Using Dimensions\n\nWe'll use the radon model from\n[this](https://mc-stan.org/learn-stan/case-studies/radon_cmdstanpy_plotnine.html)\ncase-study from the stan documentation, to show how we can use coordinates and\ndimension names to simplify working with trace objects.\n\nWe follow the same data preparation as in the case-study:\n\n::: {#92d854e3 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport arviz as az\nimport seaborn as sns\n\nhome_data = pd.read_csv(\n    \"https://github.com/pymc-devs/pymc-examples/raw/refs/heads/main/examples/data/srrs2.dat\",\n    index_col=\"idnum\",\n)\ncounty_data = pd.read_csv(\n    \"https://github.com/pymc-devs/pymc-examples/raw/refs/heads/main/examples/data/cty.dat\",\n)\n\nradon_data = (\n    home_data\n    .rename(columns=dict(cntyfips=\"ctfips\"))\n    .merge(\n        (\n            county_data\n            .drop_duplicates(['stfips', 'ctfips', 'st', 'cty', 'Uppm'])\n            .set_index([\"ctfips\", \"stfips\"])\n        ),\n        right_index=True,\n        left_on=[\"ctfips\", \"stfips\"],\n    )\n    .assign(log_radon=lambda x: np.log(np.clip(x.activity, 0.1, np.inf)))\n    .assign(log_uranium=lambda x: np.log(np.clip(x[\"Uppm\"], 0.1, np.inf)))\n    .query(\"state == 'MN'\")\n)\n```\n:::\n\n\nAnd also use the partially pooled model from the case-study:\n\n::: {#ce581edd .cell execution_count=5}\n``` {.python .cell-code}\nmodel_code = \"\"\"\ndata {\n  int<lower=1> N;  // observations\n  int<lower=1> J;  // counties\n  array[N] int<lower=1, upper=J> county;\n  vector[N] x;\n  vector[N] y;\n}\nparameters {\n  real mu_alpha;\n  real<lower=0> sigma_alpha;\n  vector<offset=mu_alpha, multiplier=sigma_alpha>[J] alpha;  // non-centered parameterization\n  real beta;\n  real<lower=0> sigma;\n}\nmodel {\n  y ~ normal(alpha[county] + beta * x, sigma);\n  alpha ~ normal(mu_alpha, sigma_alpha); // partial-pooling\n  beta ~ normal(0, 10);\n  sigma ~ normal(0, 10);\n  mu_alpha ~ normal(0, 10);\n  sigma_alpha ~ normal(0, 10);\n}\ngenerated quantities {\n  array[N] real y_rep = normal_rng(alpha[county] + beta * x, sigma);\n}\n\"\"\"\n```\n:::\n\n\nWe collect the dataset in the format that the stan model requires,\nand specify the dimensions of each of the non-scalar variables in the model:\n\n::: {#9a29bf02 .cell execution_count=6}\n``` {.python .cell-code}\ncounty_idx, counties = pd.factorize(radon_data[\"county\"], use_na_sentinel=False)\nobservations = radon_data.index\n\ncoords = {\n    \"county\": counties,\n    \"observation\": observations,\n}\n\ndims = {\n    \"alpha\": [\"county\"],\n    \"y_rep\": [\"observation\"],\n}\n\ndata = {\n    \"N\": len(observations),\n    \"J\": len(counties),\n    # Stan uses 1-based indexing!\n    \"county\": county_idx + 1,\n    \"x\": radon_data.log_uranium.values,\n    \"y\": radon_data.log_radon.values,\n}\n```\n:::\n\n\nThen, we compile the model and provide the dimensions, coordinates and the\ndataset we just defined:\n\n::: {#fe0286f3 .cell execution_count=7}\n``` {.python .cell-code}\ncompiled_model = (\n    nutpie.compile_stan_model(code=model_code)\n    .with_data(**data)\n    .with_dims(**dims)\n    .with_coords(**coords)\n)\n```\n:::\n\n\n::: {#7a704cbf .cell execution_count=8}\n``` {.python .cell-code}\n%%time\ntrace = nutpie.sample(compiled_model, seed=0)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    :root {\n        --column-width-1: 40%; /* Progress column width */\n        --column-width-2: 15%; /* Chain column width */\n        --column-width-3: 15%; /* Divergences column width */\n        --column-width-4: 15%; /* Step Size column width */\n        --column-width-5: 15%; /* Gradients/Draw column width */\n    }\n\n    .nutpie {\n        max-width: 800px;\n        margin: 10px auto;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        //color: #333;\n        //background-color: #fff;\n        padding: 10px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        border-radius: 8px;\n        font-size: 14px; /* Smaller font size for a more compact look */\n    }\n    .nutpie table {\n        width: 100%;\n        border-collapse: collapse; /* Remove any extra space between borders */\n    }\n    .nutpie th, .nutpie td {\n        padding: 8px 10px; /* Reduce padding to make table more compact */\n        text-align: left;\n        border-bottom: 1px solid #888;\n    }\n    .nutpie th {\n        //background-color: #f0f0f0;\n    }\n\n    .nutpie th:nth-child(1) { width: var(--column-width-1); }\n    .nutpie th:nth-child(2) { width: var(--column-width-2); }\n    .nutpie th:nth-child(3) { width: var(--column-width-3); }\n    .nutpie th:nth-child(4) { width: var(--column-width-4); }\n    .nutpie th:nth-child(5) { width: var(--column-width-5); }\n\n    .nutpie progress {\n        width: 100%;\n        height: 15px; /* Smaller progress bars */\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-bar {\n        background-color: #eee;\n        border-radius: 5px;\n    }\n    progress::-webkit-progress-value {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    progress::-moz-progress-bar {\n        background-color: #5cb85c;\n        border-radius: 5px;\n    }\n    .nutpie .progress-cell {\n        width: 100%;\n    }\n\n    .nutpie p strong { font-size: 16px; font-weight: bold; }\n\n    @media (prefers-color-scheme: dark) {\n        .nutpie {\n            //color: #ddd;\n            //background-color: #1e1e1e;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.2);\n        }\n        .nutpie table, .nutpie th, .nutpie td {\n            border-color: #555;\n            color: #ccc;\n        }\n        .nutpie th {\n            background-color: #2a2a2a;\n        }\n        .nutpie progress::-webkit-progress-bar {\n            background-color: #444;\n        }\n        .nutpie progress::-webkit-progress-value {\n            background-color: #3178c6;\n        }\n        .nutpie progress::-moz-progress-bar {\n            background-color: #3178c6;\n        }\n    }\n</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<div class=\"nutpie\">\n    <p><strong>Sampler Progress</strong></p>\n    <p>Total Chains: <span id=\"total-chains\">6</span></p>\n    <p>Active Chains: <span id=\"active-chains\">0</span></p>\n    <p>\n        Finished Chains:\n        <span id=\"active-chains\">6</span>\n    </p>\n    <p>Sampling for now</p>\n    <p>\n        Estimated Time to Completion:\n        <span id=\"eta\">now</span>\n    </p>\n\n    <progress\n        id=\"total-progress-bar\"\n        max=\"8400\"\n        value=\"8400\">\n    </progress>\n    <table>\n        <thead>\n            <tr>\n                <th>Progress</th>\n                <th>Draws</th>\n                <th>Divergences</th>\n                <th>Step Size</th>\n                <th>Gradients/Draw</th>\n            </tr>\n        </thead>\n        <tbody id=\"chain-details\">\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.39</td>\n                    <td>31</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.47</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.45</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.46</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.45</td>\n                    <td>7</td>\n                </tr>\n            \n                <tr>\n                    <td class=\"progress-cell\">\n                        <progress\n                            max=\"1400\"\n                            value=\"1400\">\n                        </progress>\n                    </td>\n                    <td>1400</td>\n                    <td>0</td>\n                    <td>0.45</td>\n                    <td>7</td>\n                </tr>\n            \n            </tr>\n        </tbody>\n    </table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 2.27 s, sys: 39.2 ms, total: 2.31 s\nWall time: 547 ms\n```\n:::\n:::\n\n\nAs some basic convergance checking we verify that all Rhat values are smaller\nthan 1.02, all parameters have at least 500 effective draws and that we have no\ndivergences:\n\n::: {#013fe62f .cell execution_count=9}\n``` {.python .cell-code}\nassert trace.sample_stats.diverging.sum() == 0\nassert az.ess(trace).min().min() > 500\nassert az.rhat(trace).max().max() > 1.02\n```\n:::\n\n\nThanks to the coordinates and dimensions we specified, the resulting trace will\nnow contain labeled data, so that plots based on it have properly set-up labels:\n\n::: {#34452909 .cell execution_count=10}\n``` {.python .cell-code}\nimport arviz as az\nimport seaborn as sns\nimport xarray as xr\n\nsns.catplot(\n    data=trace.posterior.alpha.to_dataframe().reset_index(),\n    y=\"county\",\n    x=\"alpha\",\n    kind=\"boxen\",\n    height=13,\n    aspect=1/2.5,\n    showfliers=False,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](stan-usage_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "stan-usage_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}