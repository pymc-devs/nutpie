name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
      # Leave out 3.13 on aarch due to an issue in pyo3/rust-numpy 0.23.4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: ${{ matrix.platform.target == 'aarch64' }}
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter 3.10 3.11 3.12 --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            dnf install -y clang-libs clang || sudo apt install llvm-dev libclang-dev clang
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        if: ${{ matrix.platform.target == 'x86_64' }}
        with:
          target: ${{ matrix.platform.target }}
          # No py3.13 yet...
          args: --release --out dist --interpreter 3.10 3.11 3.12 --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            dnf install -y clang-libs clang || sudo apt install llvm-dev libclang-dev clang
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          uv pip install 'nutpie[all]' --find-links dist --force-reinstall
          uv pip install pytest
          pytest
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'x86') && matrix.platform.target != 'ppc64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip curl make clang build-essential python3-dev
            curl -LsSf https://astral.sh/uv/install.sh | sh
            source $HOME/.local/bin/env
          run: |
            set -e
            source $HOME/.local/bin/env
            uv pip install --system -U pip pytest
            uv pip install --system 'nutpie[all]' --find-links dist --force-reinstall
            pytest

  # pyarrow doesn't currently seem to work on musllinux
  #musllinux:
  #  runs-on: ${{ matrix.platform.runner }}
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      platform:
  #        - runner: ubuntu-22.04
  #          target: x86_64
  #        - runner: ubuntu-22.04
  #          target: aarch64
  #  steps:
  #    - uses: actions/checkout@v4
  #    - uses: actions/setup-python@v5
  #      with:
  #        python-version: "3.12"
  #    - name: Install uv
  #      uses: astral-sh/setup-uv@v5
  #    - name: Build wheels
  #      uses: PyO3/maturin-action@v1
  #      with:
  #        target: ${{ matrix.platform.target }}
  #        args: --release --out dist --find-interpreter
  #        sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #        manylinux: musllinux_1_2
  #        before-script-linux: |
  #          dnf install -y clang-libs clang || apt install llvm-dev libclang-dev clang
  #    - name: Upload wheels
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: wheels-musllinux-${{ matrix.platform.target }}
  #        path: dist
  #    - name: pytest
  #      if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
  #      uses: addnab/docker-run-action@v3
  #      with:
  #        image: alpine:latest
  #        options: -v ${{ github.workspace }}:/io -w /io
  #        run: |
  #          set -e
  #          apk add py3-pip py3-virtualenv curl make clang
  #          curl -LsSf https://astral.sh/uv/install.sh | sh
  #          source $HOME/.local/bin/env
  #          python3 -m virtualenv .venv
  #          source .venv/bin/activate
  #          # No numba packages for alpine
  #          uv pip install 'nutpie[stan]' --find-links dist --force-reinstall
  #          uv pip install pytest
  #          pytest
  #    - name: pytest
  #      if: ${{ !startsWith(matrix.platform.target, 'x86') }}
  #      uses: uraimo/run-on-arch-action@v2
  #      with:
  #        arch: ${{ matrix.platform.target }}
  #        distro: alpine_latest
  #        githubToken: ${{ github.token }}
  #        install: |
  #          apk add py3-virtualenv curl make clang
  #          curl -LsSf https://astral.sh/uv/install.sh | sh
  #          source $HOME/.local/bin/env
  #        run: |
  #          set -e
  #          python3 -m virtualenv .venv
  #          source $HOME/.local/bin/env
  #          source .venv/bin/activate
  #          uv pip install pytest
  #          # No numba packages for alpine
  #          uv pip install 'nutpie[stan]' --find-links dist --force-reinstall
  #          pytest

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
          # 3.13 leave out 3.13 due to a segfault
          architecture: ${{ matrix.platform.target }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "15.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set up TBB
        if: matrix.os == 'windows-latest'
        run: |
          Add-Content $env:GITHUB_PATH "$(pwd)/stan/lib/stan_math/lib/tbb"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/lib
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
        shell: bash
        run: |
          set -e
          python3 -m venv .venv
          source .venv/Scripts/activate
          uv pip install "nutpie[all]" --find-links dist --force-reinstall
          uv pip install pytest
          pytest

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        run: |
          set -e
          python3 -m venv .venv
          source .venv/bin/activate
          uv pip install 'nutpie[all]' --find-links dist --force-reinstall
          uv pip install pytest
          pytest

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            wasm-wheels/*.whl
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
